@page "/fetchdata"
@using System.Text.Json;
@inject HttpClient Http
@inject ILocalStorageService localStorage

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    
                    <td>@forecast.Name</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Topic>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = new List<Topic>();


        StateHasChanged();


        string connectionString;
        connectionString = await localStorage.GetItemAsync<string>(nameof(connectionString));

        HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, $"WeatherForecast?connectionString={connectionString}");
        request.SetBrowserResponseStreamingEnabled(true);

        using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

        response.EnsureSuccessStatusCode();

        using Stream responseStream = await response.Content.ReadAsStreamAsync();

        await foreach (Topic topic in JsonSerializer.DeserializeAsyncEnumerable<Topic>(
            responseStream,
            new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                DefaultBufferSize = 128
            }))
        {
            forecasts.Add(topic);

            StateHasChanged();
        }

    }
}

